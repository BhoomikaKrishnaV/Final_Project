urL = "https://fbref.com/en/squads/53a2f082/2022-2023/Real-Madrid-Stats"

import requests
from bs4 import BeautifulSoup
import re
import time
import pandas as pd


class Dataset:

  def __init__(self) -> None:
    pass


  def get_soup(self, url):
      """
          params1: url (contains the url of google scholar page)
          return: soup (fetching the url page data and then further converted to html parser)
      """
    # headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36'}
      headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36'}
      try:
          # requesting for data using requests with url and headers for authentication
          data = requests.get(url)
          # print(f"Extracted the data with response as {data.status_code}")
          if data.status_code != 200:
              raise Exception("Failed to fetch data")
      except Exception as ex:
          print(f"Exception occurred as {ex}")
          return None
      soup = BeautifulSoup(data.text, "html.parser")
      return soup


  def main(self, urL):
    soup_data = self.get_soup(urL)
    tables_soup = soup_data.find_all("div", attrs={"class": "table_wrapper tabbed"})
    final_data = []
    final_mapped_data = {}
    final_mapped_data["Standard_Stats"] = self.table_reorder(tables_soup[0])
    final_mapped_data["Scores & Fixtures"] = self.table_order(tables_soup[1])
    final_mapped_data["Goalkeeping"] = self.table_reorder(tables_soup[2])
    final_mapped_data["Advanced Goalkeeping"] = self.table_reorder(tables_soup[3])
    final_mapped_data["Shooting"] = self.table_reorder(tables_soup[4])
    final_mapped_data["Passing"] = self.table_reorder(tables_soup[5])
    final_mapped_data["Pass Types"] = self.table_reorder(tables_soup[6])
    final_mapped_data["Goal and Shot Creation"] = self.table_reorder(tables_soup[7])
    final_mapped_data["Defensive Actions"] = self.table_reorder(tables_soup[8])
    final_mapped_data["Possession"] = self.table_reorder(tables_soup[9])
    final_mapped_data["Playing Time"] = self.table_reorder(tables_soup[10])
    final_mapped_data["Miscellaneous Stats"] = self.table_reorder(tables_soup[11])
    final_mapped_data["Regular season"] = self.table_order(tables_soup[12])
    return final_mapped_data

  def table_order(self, tables_soup):
    data_2 = tables_soup.find("div", attrs={"class": "table_container tabbed current"})
    rows_data = data_2.find_all("tr")
    sub_head_list = [row.text for row in rows_data[0].find_all("th") if row.text]
    final_data = {}
    for i in range(1, len(rows_data)):
      data_row1 = rows_data[i].find_all("th")
      data_rows = rows_data[i].find_all("td")
      for j in range(len(sub_head_list)):
        if i==1:
          if j == 0:
            final_data[sub_head_list[j]] = [data_row1[j].text]
          else:
            final_data[sub_head_list[j]] = [data_rows[j-1].text]
        else:
          if j == 0:
            final_data[sub_head_list[j]].append(data_row1[j].text)
          else:
            final_data[sub_head_list[j]].append(data_rows[j-1].text)

    return final_data


  def table_reorder(self, tables_soup):
    # soup_data = get_soup(urL)
    # tables_soup = soup_data.find_all("div", attrs={"class": "table_wrapper tabbed"})
    data_1 = tables_soup.find("div", attrs={"class": "table_container tabbed current"}) # table-1: Standard Stats

    rows_data = data_1.find_all("tr")
    sub_head_list = rows_data[1].find_all("th") # getting sub heading
    table1_data = {}

    table_row1 = rows_data[2].find_all("th")

    for i in range(2, len(rows_data)):
      data_row1 = rows_data[i].find_all("th")
      data_rows = rows_data[i].find_all("td")
      if not data_row1[0].text:
        continue
      for j in range(len(sub_head_list)):
        if i==2:
          if j==0:
            table1_data[sub_head_list[j].text] = [data_row1[j].text]
          else:
            head = sub_head_list[j].get("data-over-header")
            if head:
              table1_data[head+"_"+sub_head_list[j].text] = [data_rows[j-1].text]
            else:
              table1_data[sub_head_list[j].text] = [data_rows[j-1].text]
        else:
          if j==0:
            table1_data[sub_head_list[j].text].append(data_row1[j].text)
          else:
            head = sub_head_list[j].get("data-over-header")
            if head:
              table1_data[head+"_"+sub_head_list[j].text].append(data_rows[j-1].text)
            else:
              table1_data[sub_head_list[j].text].append(data_rows[j-1].text)

    return table1_data
